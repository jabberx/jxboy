{"name":"Jxboy","tagline":"virtual game console emulator","body":"# JXBOY - cross-platform virtual game console emulator\r\nConsists of two pages: debug and play (with optional touch controls).\r\n\r\n## List of games\r\nmail your game with description and author name to jabberx@ymail.com\r\nand it will be added here\r\n\r\n### Description of the machine\r\n1024 bytes RAM (first byte is 8-key keyboard bitmask, next 32 bytes is 16x16 display bitmask)\r\n\r\n1024 bytes stack\r\n\r\n2048 bytes call stack (1024 return entries)\r\n\r\nROM size: up to 65536 bytes\r\n\r\nNo registers. One RAM cell pointer.\r\n\r\n### Machine codes\r\n68 possible codes, each code is 1 byte and is printable character.\r\n\r\n    w.^y\"',_x$<>[]z=+-*/|&~%?!:#`@;{}()0123456789abcdefghijklmnopqrstuv\\\r\n\r\nThis includes operations with stack (^y\"',_x), simple 8-bit arithmetic (+-/*),\r\n\r\nlogical operators (&|~%) (% is xor here), copy/swap commands ({}()), far/short calls (@`),\r\n\r\nfar/short jumps (#:), return using call stack (;), conditional z/nz jumps (?!),\r\n\r\nram pointer movement (<>[]=) and setting values of ram cells ($\\0123456789abcdefghijklmnopqrstuv).\r\n\r\n# Detailed description:\r\n`w nop`\r\n\r\n`. halt`\r\n\r\n`^ push`\r\n\r\n`y pop`\r\n\r\n`\" dup (stack)`\r\n\r\n`' drop (stack)`\r\n\r\n`, swap (stack)`\r\n\r\n`_ clear stack`\r\n\r\n`x reverse stack`\r\n\r\n`< move data pointer left`\r\n\r\n`> move data pointer right`\r\n\r\n`[ decrease data pointer step /=2`\r\n\r\n`] increase data pointer step *=2`\r\n\r\n`z reset data pointer step to 1`\r\n\r\n`= data ptr = stack.peek(0):stack1.peek(1)`\r\n\r\n`+ add right, overflow to left`\r\n\r\n`- sub right, underflow to left`\r\n\r\n`* mul with right, overflow to left`\r\n\r\n`/ div to right, remainder to left`\r\n\r\n`| or to right`\r\n\r\n`& and to right`\r\n\r\n`~ not`\r\n\r\n`% xor to right`\r\n\r\n`? short jump if zero to 1sb relative offset in a stack`\r\n\r\n`! short jump if not zero to 1sb relative offset in a stack`\r\n\r\n`: unconditional short jump to 1sb relative offset in a stack`\r\n\r\n`# far jump (two bytes from stack is address)`\r\n\r\n`` short call`\r\n\r\n`@ far call`\r\n\r\n`; ret`\r\n\r\n`{ copy left`\r\n\r\n`} copy right`\r\n\r\n`( swap left`\r\n\r\n`) swap right`\r\n\r\n`# setting ram cell value done with two or one byte, `\r\n\r\n`for example g0 on some cell will make it 0b00000000, `\r\n\r\n`i on same cell after that will turn it into 0b00100000`\r\n\r\n`g = 0000.... | ....0000 = 0`\r\n\r\n`h = 0001.... | ....0001 = 1`\r\n\r\n`i = 0010.... | ....0010 = 2`\r\n\r\n`j = 0011.... | ....0011 = 3`\r\n\r\n`k = 0100.... | ....0100 = 4`\r\n\r\n`l = 0101.... | ....0101 = 5`\r\n\r\n`m = 0110.... | ....0110 = 6`\r\n\r\n`n = 0111.... | ....0111 = 7`\r\n\r\n`o = 1000.... | ....1000 = 8`\r\n\r\n`p = 1001.... | ....1001 = 9`\r\n\r\n`q = 1010.... | ....1010 = a`\r\n\r\n`r = 1011.... | ....1011 = b`\r\n\r\n`s = 1100.... | ....1100 = c`\r\n\r\n`t = 1101.... | ....1101 = d`\r\n\r\n`u = 1110.... | ....1110 = e`\r\n\r\n`v = 1111.... | ....1111 = f`\r\n\r\n`\\ clear cell to 0x00`\r\n\r\n`$ set cell to 0xFF`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}